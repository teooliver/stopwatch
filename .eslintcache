[{"/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/index.tsx":"1","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/reportWebVitals.ts":"2","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/App.tsx":"3","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/components/Stopwatch.tsx":"4","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/helper/Timer.ts":"5","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/components/Controls.tsx":"6","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/components/EventsTable.tsx":"7","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/helper/Events.ts":"8","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/components/EditableInput.tsx":"9","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/context/EventsContext.tsx":"10","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/icons/ThreeDotsVertical.tsx":"11"},{"size":608,"mtime":1609203428649,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1609100358517,"results":"14","hashOfConfig":"13"},{"size":263,"mtime":1609203411715,"results":"15","hashOfConfig":"13"},{"size":1498,"mtime":1609190394568,"results":"16","hashOfConfig":"13"},{"size":535,"mtime":1609114172666,"results":"17","hashOfConfig":"13"},{"size":1505,"mtime":1609191921616,"results":"18","hashOfConfig":"13"},{"size":1082,"mtime":1609193056832,"results":"19","hashOfConfig":"13"},{"size":193,"mtime":1609172873719,"results":"20","hashOfConfig":"13"},{"size":898,"mtime":1609184927619,"results":"21","hashOfConfig":"13"},{"size":509,"mtime":1609190054789,"results":"22","hashOfConfig":"13"},{"size":583,"mtime":1609192843809,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l573gi",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/index.tsx",[],"/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/reportWebVitals.ts",[],["51","52"],"/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/App.tsx",[],"/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/components/Stopwatch.tsx",["53","54","55","56"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { calculateTimer } from \"../helper/Timer\";\nimport { ILapData } from \"../interfaces/Laps\";\nimport Controls from \"./Controls\";\nimport EditableInput from \"./EditableInput\";\nimport EventsTable from \"./EventsTable\";\n// import { events } from \"../helper/Events\";\n\n// let lapData: ILapData = {\n//   event: \"Dishes\",\n//   laps: [12, 34, 78],\n// };\n\nconst Stopwatch = () => {\n  const [timeInSeconds, setTimeInSeconds] = useState<number>(0);\n  const [timerArray, setTimerArray] = useState<Array<number | string>>([]);\n  const [eventName, setEventName] = useState(\"\");\n  const [eventData, setEventData] = useState<ILapData>({\n    event: \"\",\n    time: 0,\n  });\n\n  useEffect(() => {\n    let timeArray: Array<number | string> = calculateTimer(timeInSeconds);\n    setTimerArray(timeArray);\n  }, [timeInSeconds]);\n\n  return (\n    <div className='Stopwatch'>\n      <EditableInput eventName={eventName} setEventName={setEventName} />\n      <div className='clock-controls'>\n        <section className='clock'>\n          <p className='time-text'>{timerArray[0]}</p>\n          <span>:</span>\n          <p className='time-text'>{timerArray[1]}</p>\n          <span>:</span>\n          <p className='time-text'>{timerArray[2]}</p>\n        </section>\n        <Controls\n          setTimeInSeconds={setTimeInSeconds}\n          timeInSeconds={timeInSeconds}\n          eventName={eventName}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/helper/Timer.ts",[],"/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/components/Controls.tsx",["57","58"],"import React, { FC, useContext, useEffect, useState } from \"react\";\nimport { EventsContext } from \"../context/EventsContext\";\nimport { createEvent } from \"../helper/Events\";\nimport { ILapData } from \"../interfaces/Laps\";\n\ninterface ControlsProps {\n  setTimeInSeconds: Function;\n  eventName: string;\n  timeInSeconds: number;\n}\n\nconst Controls: FC<ControlsProps> = ({\n  setTimeInSeconds,\n  eventName,\n  timeInSeconds,\n}) => {\n  const [intervalId, setIntervalId] = useState<number>(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  // @ts-ignore\n  const { setEvents } = useContext(EventsContext);\n\n  const handlePlayButton = () => {\n    let interval: any = setInterval(() => {\n      setTimeInSeconds((previousState: number) => previousState + 1);\n    }, 1000);\n    setIntervalId(interval);\n    setIsPlaying(true);\n  };\n  const handleStopButton = () => {\n    clearInterval(intervalId);\n    createEvent({ name: eventName, time: timeInSeconds });\n    // @ts-ignore\n    setEvents((prevEvents) => [\n      ...prevEvents,\n      { name: eventName, time: timeInSeconds },\n    ]);\n    setIsPlaying(false);\n  };\n  const handleResetButton = () => {\n    clearInterval(intervalId);\n    setTimeInSeconds(0);\n  };\n\n  return (\n    <div className='Controls'>\n      {isPlaying ? (\n        <button onClick={handleStopButton}>Stop</button>\n      ) : (\n        <button onClick={handlePlayButton}>Play</button>\n      )}\n      <button onClick={handleResetButton}>Reset</button>\n    </div>\n  );\n};\n\nexport default Controls;\n","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/components/EventsTable.tsx",["59","60","61"],"import React, { FC, useContext } from \"react\";\nimport { ILapData } from \"../interfaces/Laps\";\nimport { events } from \"../helper/Events\";\nimport { EventsContext } from \"../context/EventsContext\";\nimport { EventsData } from \"../interfaces/Events\";\nimport ThreeDotsVertical from \"../icons/ThreeDotsVertical\";\n\ninterface EventsTableProps {\n  // laps: ILapData;\n}\n\nconst EventsTable: FC<EventsTableProps> = () => {\n  // const totalTime = laps.laps.reduce(function (a, b) {\n  //   return a + b;\n  // }, 0);\n  //@ts-ignore\n  const { events }: { events: EventsData } = useContext(EventsContext);\n  return (\n    <ul className='EventsTable'>\n      <li className='list-item'>\n        <span> Task</span>\n        <span>Duration</span>\n      </li>\n      {events.map((event, i) => (\n        <li className='list-item' key={event.name + i}>\n          <span> {event.name}</span>\n          <span>\n            {event.time}\n            <span>\n              <ThreeDotsVertical />\n            </span>\n          </span>\n        </li>\n      ))}\n    </ul>\n  );\n  return null;\n};\n\nexport default EventsTable;\n","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/helper/Events.ts",[],"/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/components/EditableInput.tsx",["62"],"import React, { FC, FormEvent, useState } from \"react\";\n\ninterface EditableInputProps {\n  eventName: string;\n  setEventName: Function;\n}\n\nconst EditableInput: FC<EditableInputProps> = ({ eventName, setEventName }) => {\n  const [isEditing, setIsEditing] = useState(false);\n\n  const onKeyUp = (event: any) => {\n    if (event.charCode === 13) {\n      setIsEditing(false);\n    }\n  };\n\n  return (\n    <div className='input-container'>\n      {isEditing ? (\n        <input\n          className='event-name-input'\n          type='text'\n          value={eventName}\n          onChange={(e) => setEventName(e.target.value)}\n          onSubmit={() => setIsEditing(false)}\n          onKeyPress={onKeyUp}\n        />\n      ) : (\n        <p className='event-name-input' onClick={() => setIsEditing(true)}>\n          {eventName || \"Add Event\"}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default EditableInput;\n","/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/context/EventsContext.tsx",[],"/Users/teoliver/Documents/Web_Projects_Docs/Code/stopwatch/src/icons/ThreeDotsVertical.tsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":28,"nodeType":"69","messageId":"70","endLine":1,"endColumn":34},{"ruleId":"67","severity":1,"message":"71","line":6,"column":8,"nodeType":"69","messageId":"70","endLine":6,"endColumn":19},{"ruleId":"67","severity":1,"message":"72","line":18,"column":10,"nodeType":"69","messageId":"70","endLine":18,"endColumn":19},{"ruleId":"67","severity":1,"message":"73","line":18,"column":21,"nodeType":"69","messageId":"70","endLine":18,"endColumn":33},{"ruleId":"67","severity":1,"message":"74","line":1,"column":33,"nodeType":"69","messageId":"70","endLine":1,"endColumn":42},{"ruleId":"67","severity":1,"message":"75","line":4,"column":10,"nodeType":"69","messageId":"70","endLine":4,"endColumn":18},{"ruleId":"67","severity":1,"message":"75","line":2,"column":10,"nodeType":"69","messageId":"70","endLine":2,"endColumn":18},{"ruleId":"67","severity":1,"message":"76","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":16},{"ruleId":"77","severity":1,"message":"78","line":37,"column":3,"nodeType":"79","messageId":"80","endLine":37,"endColumn":15},{"ruleId":"67","severity":1,"message":"81","line":1,"column":21,"nodeType":"69","messageId":"70","endLine":1,"endColumn":30},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'EventsTable' is defined but never used.","'eventData' is assigned a value but never used.","'setEventData' is assigned a value but never used.","'useEffect' is defined but never used.","'ILapData' is defined but never used.","'events' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'FormEvent' is defined but never used.","no-global-assign","no-unsafe-negation"]